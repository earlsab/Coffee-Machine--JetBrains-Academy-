type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # initial resource
    money = 550
    water = 400
    milk = 540
    cbeans = 120
    dcups = 9

    # resource cost for item
    water_1 = 250
    water_2 = 350
    water_3 = 200
    cbeans_1 = 16
    cbeans_2 = 20
    cbeans_3 = 12
    money_1 = 4
    money_2 = 7
    money_3 = 6
    milk_2 = 75
    milk_3 = 100
    dcups_all = 1


    def resource_check(r_coffee):
        global water_check, cbeans_check, dcups_check, milk_check,\
            back_coffee, resource_lacking

        water_check = False
        cbeans_check = False
        dcups_check = False
        milk_check = False


        if r_coffee == "1":
            water_check = bool(water >= water_1)
            if not water_check:
                resource_lacking.append("water")
            cbeans_check = bool(cbeans >= cbeans_1)
            if not cbeans_check:
                resource_lacking.append("coffee beans")
            dcups_check = bool(dcups >= dcups_all)
            if not dcups_check:
                resource_lacking.append("disposable cups")
            if not ((water_check and cbeans_check) and dcups_check):
                back_coffee = False
        elif r_coffee == "2":
            water_check = bool(water >= water_2)
            if not water_check:
                resource_lacking.append("water")
            cbeans_check = bool(cbeans >= cbeans_2)
            if not cbeans_check:
                resource_lacking.append("coffee beans")
            milk_check = bool(milk >= water_2)
            if not milk_check:
                resource_lacking.append("milk")
            dcups_check = bool(dcups >= dcups_all)
            if not dcups_check:
                resource_lacking.append("disposable cups")
            if not ((water_check and cbeans_check) and (milk_check and dcups_check)):
                back_coffee = False
        elif r_coffee == "3":
            water_check = bool(water >= water_3)
            if not water_check:
                resource_lacking.append("water")
            cbeans_check = bool(cbeans >= cbeans_3)
            if not cbeans_check:
                resource_lacking.append("coffee beans")
            milk_check = bool(milk >= water_3)
            if not milk_check:
                resource_lacking.append("milk")
            dcups_check = bool(dcups >= dcups_all)
            if not dcups_check:
                resource_lacking.append("disposable cups")
            if not ((water_check and cbeans_check) and (milk_check and dcups_check)):
                back_coffee = False


    def machine_status():
        print("The coffee machine has:")
        print(str(water), "of water")
        print(str(milk), "of milk")
        print(str(cbeans), "of coffee beans")
        print(str(dcups), "of disposable cups")
        print(str(money), "of money")


    def buy():
        global money, water, milk, cbeans, dcups, resource_lacking,back_coffee
        print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:")
        action_buy = input()
        resource_check(action_buy)
        if back_coffee:
            print("I have enough resources, making you a coffee!")
        if not back_coffee:
            print("Sorry, not enough", (', '.join(resource_lacking)) + "!")
        elif action_buy == "1":
            water = water - water_1
            cbeans = cbeans - cbeans_1
            money = money + money_1
            dcups = dcups - dcups_all

        elif action_buy == "2":
            water = water - water_2
            milk = milk - milk_2
            cbeans = cbeans - cbeans_2
            money = money + money_2
            dcups = dcups - dcups_all
        elif action_buy == "3":
            water = water - water_3
            milk = milk - milk_3
            cbeans = cbeans - cbeans_3
            money = money + money_3
            dcups = dcups - dcups_all
        elif action_buy == "back":
            pass


    def fill():
        global water, milk, cbeans, dcups
        print("Write how many ml of water do you want to add:")
        water = water + int(input())
        print("Write how many ml of milk do you want to add:")
        milk = milk + int(input())
        print("Write how many grams of coffee beans do you want to add:")
        cbeans = cbeans + int(input())
        print("Write how many disposable cups of coffee do you want to add:")
        dcups = dcups + int(input())


    def take():
        global money
        print("I give you", "$" + str(money))
        money = money - money


    while True:
        print("Write action (buy, fill, take, remaining, exit):")
        action = input()

        if action == "buy":
            resource_lacking = []
            back_coffee = True
            buy()
        elif action == "fill":
            fill()
        elif action == "take":
            take()
        elif action == "remaining":
            machine_status()
        elif action == "exit":
            break
        else:
            continue
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
